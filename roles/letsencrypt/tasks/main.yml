---
- name: Include letsencrypt tool
  yum: pkg=letsencrypt state=latest

- name: Fail when missing required arguments
  fail: msg="Missing required parameters/variables"
  when: letsencrypt_email is not defined or letsencrypt_domains is not defined

- set_fact: _letsencrypt_certbot_args="{{letsencrypt_certbot_args + ['--renew-by-default']}}"
  when: letsencrypt_force_renew == true

- set_fact: _letsencrypt_certbot_args="{{letsencrypt_certbot_args + ['--keep-until-expiring']}}"
  when: letsencrypt_force_renew != true

- name: Stopping Services
  service: name="{{item}}" state=stopped
  with_items: "{{ letsencrypt_pause_services }}"
  ignore_errors: yes
  register: _services_stopped

- name: Obtain or renew cert for domain
  shell: certbot certonly --text -n --no-self-upgrade -m {{ letsencrypt_email }} --domains {{ letsencrypt_domains | join(',') }} --agree-tos --standalone --expand {{_letsencrypt_certbot_args | join(' ')}} 2>&1
  ignore_errors: true
  register: _certbot_command

- name: Set signing successful message
  set_fact: _signing_successful='{{ certbot_success_message in _certbot_command.stdout }}'

- name: Determine if signing was skipped
  set_fact: _signing_skipped='{{ (letsencrypt_force_renew != true) and (certbot_skip_renewal_message in _certbot_command.stdout) }}'

- debug: msg="{{ (_certbot_command.stdout_lines if _certbot_command.stdout_lines is defined else _certbot_command.stderr_lines) | pprint }}"
  when: letsencrypt_certbot_verbose or ((_signing_successful == false) and (_signing_skipped == false))

- name: Starting paused Services
  service: name="{{item.item}}" state=started
  when: (item.state is defined and item.state == "stopped")
  with_items: "{{ _services_stopped.results }}"

- name: Install crontab
  cron: name="letsencrypt renewal" hour=3 minute=0 weekday=0 job="/usr/bin/certbot renew 1>/dev/null" user="root"

- fail: msg="Error signing the certificate"
  when: (_signing_successful == false) and (_signing_skipped == false)
